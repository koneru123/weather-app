{"ast":null,"code":"var _jsxFileName = \"/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\nimport \"weather-icons/css/weather-icons.css\";\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async (e, lat = 0, long = 0) => {\n      let response = null;\n\n      if (e) {\n        e.preventDefault();\n        const country = e.target.elements.country.value;\n        const city = e.target.elements.city.value;\n\n        if (country && city) {\n          const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n          response = await api_call.json();\n        }\n      }\n\n      if (lat !== 0 && long !== 0) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${Api_Key}`);\n        response = await api_call.json();\n      }\n\n      if (response.cod >= 400) {\n        this.setState({\n          error: true\n        });\n      } else {\n        response.weather[0].id = 321;\n        this.setState({\n          city: `${response.name}, ${response.sys.country}`,\n          //city: response.name,\n          country: response.sys.country,\n          main: response.weather[0].main,\n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n        }); // seting icons\n\n        this.getWeatherIcon(this.weatherIcons, response.weather[0].id);\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm,\n          weatherCls: 'thunderstormWeather'\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle,\n          weatherCls: 'drizzleWeather'\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain,\n          weatherCls: 'rainyWeather'\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow,\n          weatherCls: 'snowyWeather'\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere,\n          weatherCls: 'foggyWeather'\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear,\n          weatherCls: 'clearWeather'\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  componentWillMount() {\n    let lat = 0,\n        long = 0;\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    }\n\n    function displayLocationInfo(position) {\n      const {\n        lat,\n        lng\n      } = position.coords;\n\n      if (lat !== 0 && lng !== 0) {\n        debugger;\n        App.getWeather(null, lat, lng);\n      }\n    }\n  }\n\n  render() {\n    const {\n      city,\n      icon,\n      celsius,\n      temp_max,\n      temp_min,\n      description,\n      error,\n      weatherCls\n    } = this.state;\n    const classes = ['App', weatherCls];\n    return React.createElement(\"div\", {\n      className: classNames(classes),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      cityname: city,\n      weatherIcon: icon,\n      temp_celsius: celsius,\n      temp_max: temp_max,\n      temp_min: temp_min,\n      description: description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js"],"names":["React","Form","Weather","classNames","Api_Key","App","Component","constructor","getWeather","e","lat","long","response","preventDefault","country","target","elements","value","city","api_call","fetch","json","cod","setState","error","weather","id","name","sys","main","celsius","calCelsius","temp","temp_max","temp_min","description","getWeatherIcon","weatherIcons","state","undefined","icon","weatherCls","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","cell","Math","floor","componentWillMount","navigator","geolocation","getCurrentPosition","displayLocationInfo","position","lng","coords","render","classes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\n\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm, weatherCls: 'thunderstormWeather' });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle, weatherCls: 'drizzleWeather' });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain, weatherCls: 'rainyWeather' });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow, weatherCls: 'snowyWeather' });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere, weatherCls: 'foggyWeather' });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear, weatherCls: 'clearWeather' });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async (e, lat=0, long=0 ) => {\n    let response = null;\n    if(e) {\n      e.preventDefault();\n\n      const country = e.target.elements.country.value;\n      const city = e.target.elements.city.value;\n\n      if (country && city) {\n        const api_call = await fetch(\n          `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n        );\n\n        response = await api_call.json();\n      }\n    }\n\n    if(lat !==0 && long !== 0) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${Api_Key}`\n      );\n\n      response = await api_call.json();\n    }\n\n    if(response.cod >=400){\n      this.setState({\n        error: true\n      });\n    } else {\n      response.weather[0].id = 321;\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        //city: response.name,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // seting icons\n      this.getWeatherIcon(this.weatherIcons, response.weather[0].id);\n    }\n  };\n\n  componentWillMount() {\n    let lat = 0,\n    long = 0;\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    }\n\n    function displayLocationInfo(position) {\n      const {lat, lng} = position.coords;\n\n      if(lat !== 0 && lng !== 0) {debugger;\n        App.getWeather(null, lat, lng);\n      }\n    }\n\n  }\n\n  render() {\n    const {city, icon, celsius, temp_max, temp_min, description, error, weatherCls} = this.state;\n    const classes = [\n      'App',\n      weatherCls\n    ];\n    return (\n      <div className={classNames(classes)} >\n        <Form loadweather={this.getWeather} error={error} />\n        <Weather\n          cityname={city}\n          weatherIcon={icon}\n          temp_celsius={celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}