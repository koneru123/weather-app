{"ast":null,"code":"var _jsxFileName = \"/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\nimport \"weather-icons/css/weather-icons.css\";\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const country = e.target.elements.country.value;\n      const city = e.target.elements.city.value;\n\n      if (country && city) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n        const response = await api_call.json();\n\n        if (response.cod >= 400) {\n          this.setState({\n            error: true\n          });\n        } else {\n          response.weather[0].id = 502;\n          this.setState({\n            city: `${response.name}, ${response.sys.country}`,\n            //city: response.name,\n            country: response.sys.country,\n            main: response.weather[0].main,\n            celsius: this.calCelsius(response.main.temp),\n            temp_max: this.calCelsius(response.main.temp_max),\n            temp_min: this.calCelsius(response.main.temp_min),\n            description: response.weather[0].description,\n            error: false\n          }); // seting icons\n\n          this.getWeatherIcon(this.weatherIcons, response.weather[0].id);\n        } //console.log(response);\n\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm,\n          weatherCls: 'thunderstormWeather'\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle,\n          weatherCls: 'drizzleWeather'\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain,\n          weatherCls: 'rainyWeather'\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow,\n          weatherCls: 'snowyWeather'\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere,\n          weatherCls: 'foggyWeather'\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear,\n          weatherCls: 'clearWeather'\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  render() {\n    const {\n      city,\n      icon,\n      celsius,\n      temp_max,\n      temp_min,\n      description,\n      error,\n      weatherCls\n    } = this.state;\n    const classes = ['App', weatherCls];\n    return React.createElement(\"div\", {\n      className: classNames(classes),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      cityname: city,\n      weatherIcon: icon,\n      temp_celsius: celsius,\n      temp_max: temp_max,\n      temp_min: temp_min,\n      description: description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js"],"names":["React","Form","Weather","classNames","Api_Key","App","Component","constructor","getWeather","e","preventDefault","country","target","elements","value","city","api_call","fetch","response","json","cod","setState","error","weather","id","name","sys","main","celsius","calCelsius","temp","temp_max","temp_min","description","getWeatherIcon","weatherIcons","state","undefined","icon","weatherCls","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","cell","Math","floor","render","classes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\n\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm, weatherCls: 'thunderstormWeather' });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle, weatherCls: 'drizzleWeather' });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain, weatherCls: 'rainyWeather' });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow, weatherCls: 'snowyWeather' });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere, weatherCls: 'foggyWeather' });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear, weatherCls: 'clearWeather' });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      if(response.cod >=400){\n        this.setState({\n          error: true\n        });\n      } else {\n        response.weather[0].id = 502;\n        this.setState({\n          city: `${response.name}, ${response.sys.country}`,\n          //city: response.name,\n          country: response.sys.country,\n          main: response.weather[0].main,\n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n        });\n\n        // seting icons\n        this.getWeatherIcon(this.weatherIcons, response.weather[0].id);\n      }\n      //console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    const {city, icon, celsius, temp_max, temp_min, description, error, weatherCls} = this.state;\n    const classes = [\n      'App',\n      weatherCls\n    ];\n    return (\n      <div className={classNames(classes)} >\n        <Form loadweather={this.getWeather} error={error} />\n        <Weather\n          cityname={city}\n          weatherIcon={icon}\n          temp_celsius={celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}