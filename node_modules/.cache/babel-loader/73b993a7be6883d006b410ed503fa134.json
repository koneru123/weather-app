{"ast":null,"code":"var _jsxFileName = \"/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport clearWeather from './images/clear.gif';\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\nconst clearW = {\n  backgroundImage: `url(${clearWeather})`,\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center'\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const country = e.target.elements.country.value;\n      const city = e.target.elements.city.value;\n\n      if (country && city) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n        const response = await api_call.json();\n        this.setState({\n          city: `${response.name}, ${response.sys.country}`,\n          //city: response.name,\n          country: response.sys.country,\n          main: response.weather[0].main,\n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n        }); // seting icons\n\n        this.getWeatherIcon(this.weatherIcons, response.weather[0].id); //console.log(response);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      backgroundImg: 'url(\"./images/clear.gif\")',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds\n        });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  componentDidMount() {\n    /* const appEle = window.document.body;debugger;\n    if(appEle) {\n      appEle.style = {\n        backgroundImage: 'url(\"./images/clear.gif\")',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      }\n    } */\n  }\n\n  render() {\n    const {\n      city,\n      icon,\n      celsius,\n      temp_max,\n      temp_min,\n      description,\n      error\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        backgroundImage: `url(${clearWeather})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      cityname: city,\n      weatherIcon: icon,\n      temp_celsius: celsius,\n      temp_max: temp_max,\n      temp_min: temp_min,\n      description: description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js"],"names":["React","Form","Weather","clearWeather","Api_Key","clearW","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","App","Component","constructor","getWeather","e","preventDefault","country","target","elements","value","city","api_call","fetch","response","json","setState","name","sys","main","weather","celsius","calCelsius","temp","temp_max","temp_min","description","error","getWeatherIcon","weatherIcons","id","state","undefined","icon","backgroundImg","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","cell","Math","floor","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"weather-icons/css/weather-icons.css\";\nimport clearWeather from './images/clear.gif';\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nconst clearW = {\n  backgroundImage: `url(${clearWeather})`,\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center'\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      backgroundImg: 'url(\"./images/clear.gif\")',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        //city: response.name,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // seting icons\n      this.getWeatherIcon(this.weatherIcons, response.weather[0].id);\n\n      //console.log(response);\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  componentDidMount() {\n    /* const appEle = window.document.body;debugger;\n    if(appEle) {\n      appEle.style = {\n        backgroundImage: 'url(\"./images/clear.gif\")',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center'\n      }\n    } */\n  }\n\n  render() {\n    const {city, icon, celsius, temp_max, temp_min, description, error} = this.state;\n    return (\n      <div className=\"App\" style={{backgroundImage: `url(${clearWeather})`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center'}} >\n        <Form loadweather={this.getWeather} error={error} />\n        <Weather\n          cityname={city}\n          weatherIcon={icon}\n          temp_celsius={celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}