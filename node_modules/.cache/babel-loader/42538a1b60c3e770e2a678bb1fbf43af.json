{"ast":null,"code":"var _jsxFileName = \"/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\nimport \"weather-icons/css/weather-icons.css\";\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nconst calCelsius = temp => {\n  return Math.floor(temp - 273.15);\n};\n\nconst convertFtoC = fTemp => {\n  return Math.floor((fTemp - 32) * 5 / 9);\n};\n\nconst weatherIcons = {\n  Thunderstorm: \"wi-thunderstorm\",\n  Drizzle: \"wi-sleet\",\n  Rain: \"wi-storm-showers\",\n  Snow: \"wi-snow\",\n  Atmosphere: \"wi-fog\",\n  Clear: \"wi-day-sunny\",\n  Clouds: \"wi-day-fog\"\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const country = e.target.elements.country.value;\n      const city = e.target.elements.city.value;\n\n      if (country && city) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n        const response = await api_call.json();\n\n        if (!response || response.cod >= 400) {\n          App.setState({\n            error: true\n          });\n        } else {\n          this.setState({\n            city: `${response.name}, ${response.sys.country}`,\n            //city: response.name,\n            country: response.sys.country,\n            main: response.weather[0].main,\n            celsius: calCelsius(response.main.temp),\n            temp_max: calCelsius(response.main.temp_max),\n            temp_min: calCelsius(response.main.temp_min),\n            description: response.weather[0].description,\n            error: false\n          }); // seting icons\n\n          this.getWeatherIcon(weatherIcons, response.weather[0].id);\n        }\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.changeToCelcius = () => {\n      const {\n        celsius,\n        temp_max,\n        temp_min\n      } = this.state;\n      const convertedTemp = convertFtoC(celsius);\n      const convertedMax = convertFtoC(temp_max);\n      const convertedMin = convertFtoC(temp_min);\n      this.setState({\n        celsius: convertedTemp,\n        temp_max: convertedMax,\n        temp_min: convertedMin,\n        fTemp: {\n          celsius,\n          temp_max,\n          temp_min\n        }\n      });\n    };\n\n    this.changeToFarenheit = () => {\n      const {\n        fTemp\n      } = this.state;\n      this.setState({ ...fTemp\n      });\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false,\n      fTemp: {}\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm,\n          weatherCls: 'thunderstormWeather'\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle,\n          weatherCls: 'drizzleWeather'\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain,\n          weatherCls: 'rainyWeather'\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow,\n          weatherCls: 'snowyWeather'\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere,\n          weatherCls: 'foggyWeather'\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear,\n          weatherCls: 'clearWeather'\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n    }\n  }\n\n  componentDidMount() {\n    const currentComp = this;\n    let lat = 0,\n        long = 0;\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    }\n\n    function displayLocationInfo(position) {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n\n      if (latitude && longitude) {\n        (async () => {\n          const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${Api_Key}&units=imperial`);\n          const response = await api_call.json();\n          currentComp.setState({\n            city: `${response.name}, ${response.sys.country}`,\n            //city: response.name,\n            country: response.sys.country,\n            main: response.weather[0].main,\n            celsius: response.main.temp,\n            temp_max: response.main.temp_max,\n            temp_min: response.main.temp_min,\n            description: response.weather[0].description,\n            error: false\n          }); // seting icons\n\n          currentComp.getWeatherIcon(weatherIcons, response.weather[0].id);\n        })();\n      }\n    }\n  }\n\n  render() {\n    const {\n      city,\n      icon,\n      celsius,\n      temp_max,\n      temp_min,\n      description,\n      error,\n      weatherCls\n    } = this.state;\n    const classes = ['App', weatherCls];\n    return React.createElement(\"div\", {\n      className: classNames(classes),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      cityname: city,\n      weatherIcon: icon,\n      temp_celsius: celsius,\n      temp_max: temp_max,\n      temp_min: temp_min,\n      description: description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: this.changeToFarenheit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"\\xB0F\"), \" / \", React.createElement(\"a\", {\n      onClick: this.changeToCelcius,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"\\xB0C\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js"],"names":["React","Form","Weather","classNames","Api_Key","calCelsius","temp","Math","floor","convertFtoC","fTemp","weatherIcons","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","App","Component","constructor","getWeather","e","preventDefault","country","target","elements","value","city","api_call","fetch","response","json","cod","setState","error","name","sys","main","weather","celsius","temp_max","temp_min","description","getWeatherIcon","id","changeToCelcius","state","convertedTemp","convertedMax","convertedMin","changeToFarenheit","undefined","icon","weatherCls","icons","rangeId","componentDidMount","currentComp","lat","long","navigator","geolocation","getCurrentPosition","displayLocationInfo","position","latitude","longitude","coords","render","classes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\n\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nconst calCelsius = temp => {\n  return Math.floor(temp - 273.15);\n}\n\nconst convertFtoC = fTemp => {\n  return Math.floor(((fTemp - 32) * 5) / 9 );\n}\n\nconst weatherIcons = {\n  Thunderstorm: \"wi-thunderstorm\",\n  Drizzle: \"wi-sleet\",\n  Rain: \"wi-storm-showers\",\n  Snow: \"wi-snow\",\n  Atmosphere: \"wi-fog\",\n  Clear: \"wi-day-sunny\",\n  Clouds: \"wi-day-fog\"\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false,\n      fTemp: {}\n    };\n\n\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm, weatherCls: 'thunderstormWeather' });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle, weatherCls: 'drizzleWeather' });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain, weatherCls: 'rainyWeather' });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow, weatherCls: 'snowyWeather' });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere, weatherCls: 'foggyWeather' });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear, weatherCls: 'clearWeather' });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n    }\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n      const response = await api_call.json();\n      if(!response || response.cod >=400){\n        App.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          city: `${response.name}, ${response.sys.country}`,\n          //city: response.name,\n          country: response.sys.country,\n          main: response.weather[0].main,\n          celsius: calCelsius(response.main.temp),\n          temp_max: calCelsius(response.main.temp_max),\n          temp_min: calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n        });\n\n        // seting icons\n        this.getWeatherIcon(weatherIcons, response.weather[0].id);\n      }\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  changeToCelcius = () => {\n    const {celsius, temp_max, temp_min} = this.state;\n    const convertedTemp = convertFtoC(celsius);\n    const convertedMax = convertFtoC(temp_max);\n    const convertedMin = convertFtoC(temp_min);\n\n    this.setState({\n      celsius: convertedTemp,\n      temp_max: convertedMax,\n      temp_min: convertedMin,\n      fTemp: { celsius, temp_max, temp_min }\n    });\n  }\n\n  changeToFarenheit = () => {\n    const {fTemp} = this.state;\n\n    this.setState({\n      ...fTemp\n    });\n  }\n  componentDidMount() {\n    const currentComp = this;\n    let lat = 0,\n    long = 0;\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    }\n\n    function displayLocationInfo(position) {\n      const {latitude, longitude} = position.coords;\n\n      if(latitude && longitude) {\n        (async () => {\n          const api_call = await fetch(\n            `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${Api_Key}&units=imperial`\n          );\n          const response = await api_call.json();\n\n          currentComp.setState({\n            city: `${response.name}, ${response.sys.country}`,\n            //city: response.name,\n            country: response.sys.country,\n            main: response.weather[0].main,\n            celsius: response.main.temp,\n            temp_max: response.main.temp_max,\n            temp_min: response.main.temp_min,\n            description: response.weather[0].description,\n            error: false\n          });\n\n          // seting icons\n          currentComp.getWeatherIcon(weatherIcons, response.weather[0].id);\n        })();\n      }\n    }\n  }\n\n  render() {\n    const {city, icon, celsius, temp_max, temp_min, description, error, weatherCls} = this.state;\n    const classes = [\n      'App',\n      weatherCls\n    ];\n    return (\n      <div className={classNames(classes)} >\n        <Form loadweather={this.getWeather} error={error} />\n        <Weather\n          cityname={city}\n          weatherIcon={icon}\n          temp_celsius={celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n        />\n        <div className=\"text-light\">\n          <a onClick={this.changeToFarenheit}>&deg;F</a> / <a onClick={this.changeToCelcius}>&deg;C</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}