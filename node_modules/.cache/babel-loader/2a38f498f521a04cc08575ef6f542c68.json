{"ast":null,"code":"var _jsxFileName = \"/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\nimport \"weather-icons/css/weather-icons.css\";\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nconst calCelsius = temp => {\n  let cell = Math.floor(temp - 273.15);\n  return cell;\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm,\n          weatherCls: 'thunderstormWeather'\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle,\n          weatherCls: 'drizzleWeather'\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain,\n          weatherCls: 'rainyWeather'\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow,\n          weatherCls: 'snowyWeather'\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere,\n          weatherCls: 'foggyWeather'\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear,\n          weatherCls: 'clearWeather'\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds,\n          weatherCls: 'cloudyWeather'\n        });\n    }\n  }\n\n  componentDidMount() {\n    let lat = 0,\n        long = 0;\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    }\n\n    function displayLocationInfo(position) {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n\n      if (latitude && longitude) {\n        debugger;\n        this.getWeather(null, latitude, longitude);\n      }\n    }\n  }\n\n  render() {\n    const {\n      city,\n      icon,\n      celsius,\n      temp_max,\n      temp_min,\n      description,\n      error,\n      weatherCls\n    } = this.state;\n    const classes = ['App', weatherCls];\n    return React.createElement(\"div\", {\n      className: classNames(classes),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      cityname: city,\n      weatherIcon: icon,\n      temp_celsius: celsius,\n      temp_max: temp_max,\n      temp_min: temp_min,\n      description: description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }));\n  }\n\n}\n\nApp.getWeather = async (e, lat = 0, long = 0) => {\n  let response = null;\n\n  if (e) {\n    e.preventDefault();\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n      response = await api_call.json();\n    }\n  }\n\n  if (lat !== 0 && long !== 0) {\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${Api_Key}`);\n    response = await api_call.json();\n  }\n\n  if (response.cod >= 400) {\n    App.setState({\n      error: true\n    });\n  } else {\n    response.weather[0].id = 321;\n    App.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      //city: response.name,\n      country: response.sys.country,\n      main: response.weather[0].main,\n      celsius: calCelsius(response.main.temp),\n      temp_max: calCelsius(response.main.temp_max),\n      temp_min: calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n      error: false\n    }); // seting icons\n\n    App.getWeatherIcon(App.weatherIcons, response.weather[0].id);\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/priyankakoneru/HR/hrext15-sprint-my-cruddy-app/weather/src/App.js"],"names":["React","Form","Weather","classNames","Api_Key","calCelsius","temp","cell","Math","floor","App","Component","constructor","state","city","undefined","country","icon","weatherCls","main","celsius","temp_max","temp_min","description","error","weatherIcons","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getWeatherIcon","icons","rangeId","setState","componentDidMount","lat","long","navigator","geolocation","getCurrentPosition","displayLocationInfo","position","latitude","longitude","coords","getWeather","render","classes","e","response","preventDefault","target","elements","value","api_call","fetch","json","cod","weather","id","name","sys"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport classNames from 'classnames';\n\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nconst calCelsius = temp => {\n  let cell = Math.floor(temp - 273.15);\n  return cell;\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      weatherCls: 'clearWeather',\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcons = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm, weatherCls: 'thunderstormWeather' });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle, weatherCls: 'drizzleWeather' });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain, weatherCls: 'rainyWeather' });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow, weatherCls: 'snowyWeather' });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere, weatherCls: 'foggyWeather' });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear, weatherCls: 'clearWeather' });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds, weatherCls: 'cloudyWeather' });\n    }\n  }\n\n  static getWeather = async (e, lat=0, long=0 ) => {\n    let response = null;\n    if(e) {\n      e.preventDefault();\n\n      const country = e.target.elements.country.value;\n      const city = e.target.elements.city.value;\n\n      if (country && city) {\n        const api_call = await fetch(\n          `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n        );\n        response = await api_call.json();\n      }\n    }\n\n    if(lat !==0 && long !== 0) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${Api_Key}`\n      );\n      response = await api_call.json();\n    }\n\n    if(response.cod >=400){\n      this.setState({\n        error: true\n      });\n    } else {\n      response.weather[0].id = 321;\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        //city: response.name,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: calCelsius(response.main.temp),\n        temp_max: calCelsius(response.main.temp_max),\n        temp_min: calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // seting icons\n      this.getWeatherIcon(this.weatherIcons, response.weather[0].id);\n    }\n  };\n\n  componentDidMount() {\n    let lat = 0,\n    long = 0;\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(displayLocationInfo);\n    }\n    function displayLocationInfo(position) {\n      const {latitude, longitude} = position.coords;\n\n      if(latitude && longitude) {debugger;\n        this.getWeather(null, latitude, longitude);\n      }\n    }\n  }\n\n  render() {\n    const {city, icon, celsius, temp_max, temp_min, description, error, weatherCls} = this.state;\n    const classes = [\n      'App',\n      weatherCls\n    ];\n    return (\n      <div className={classNames(classes)} >\n        <Form loadweather={this.getWeather} error={error} />\n        <Weather\n          cityname={city}\n          weatherIcon={icon}\n          temp_celsius={celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}